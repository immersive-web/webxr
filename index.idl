/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

partial interface Navigator {
  Promise<sequence<VRDisplay>> getVRDisplays();
  readonly attribute sequence<VRDisplay> activeVRDisplays;
};

partial interface Window {
  attribute EventHandler onvrdisplayconnected;
  attribute EventHandler onvrdisplaydisconnected;
  attribute EventHandler onvrdisplaypresentchange;
};

interface VRDisplay : EventTarget {
  readonly attribute boolean isConnected;
  readonly attribute boolean isPresenting;

  [Constant] readonly attribute VRDisplayCapabilities capabilities;

  readonly attribute VRStageParameters? stageParameters;

  VREyeParameters getEyeParameters(VREye whichEye);

  [Constant] readonly attribute unsigned long displayId;

  [Constant] readonly attribute DOMString displayName;

  [NewObject] VRPose getPose();

  [NewObject] VRPose getImmediatePose();

  void resetPose();

  attribute double depthNear;
  attribute double depthFar;

  [Throws] long requestAnimationFrame(FrameRequestCallback callback);

  [Throws] void cancelAnimationFrame(long handle);

  Promise<void> requestPresent(VRLayer layer);

  Promise<void> exitPresent();

  sequence<VRLayer>? getLayers();

  void submitFrame(optional VRPose pose);
};

typedef (HTMLCanvasElement or
         OffscreenCanvas) VRSource;

dictionary VRLayer {
  VRSource? source = null;
  sequence<float>? leftBounds = [0.0, 0.0, 0.5, 1.0];
  sequence<float>? rightBounds = [0.5, 0.0, 0.5, 1.0];
};

interface VRDisplayCapabilities {
  readonly attribute boolean hasPosition;
  readonly attribute boolean hasOrientation;
  readonly attribute boolean hasExternalDisplay;
  readonly attribute boolean canPresent;
};

interface VRStageParameters {
  readonly attribute Float32Array sittingToStandingTransform;

  readonly attribute float sizeX;
  readonly attribute float sizeZ;
};

interface VRPose {
  readonly attribute DOMHighResTimeStamp timestamp;

  readonly attribute unsigned long frameID;

  readonly attribute Float32Array? position;
  readonly attribute Float32Array? linearVelocity;
  readonly attribute Float32Array? linearAcceleration;

  readonly attribute Float32Array? orientation;
  readonly attribute Float32Array? angularVelocity;
  readonly attribute Float32Array? angularAcceleration;
};

interface VRFieldOfViewReadOnly {
  readonly attribute double upDegrees;
  readonly attribute double rightDegrees;
  readonly attribute double downDegrees;
  readonly attribute double leftDegrees;
};

interface VRFieldOfView : VRFieldOfViewReadOnly {
  inherit attribute double upDegrees;
  inherit attribute double rightDegrees;
  inherit attribute double downDegrees;
  inherit attribute double leftDegrees;
};

dictionary VRFieldOfViewInit {
  double upDegrees = 0.0;
  double rightDegrees = 0.0;
  double downDegrees = 0.0;
  double leftDegrees = 0.0;
};

enum VREye {
  "left",
  "right"
};

interface VREyeParameters {
  [Constant, Cached] readonly attribute Float32Array offset;

  [Constant, Cached] readonly attribute VRFieldOfView fieldOfView;

  [Constant, Cached] readonly attribute unsigned long renderWidth;
  [Constant, Cached] readonly attribute unsigned long renderHeight;
};

partial interface Gamepad {
  [Constant] readonly attribute unsigned long displayId;
};
